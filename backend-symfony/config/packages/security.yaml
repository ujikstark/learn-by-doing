security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        refresh:
            pattern: ^/security/refresh-token
            stateless: true
            refresh_jwt: ~
        
        login:
            pattern: ^/security/login
            stateless: true
            json_login:
                username_path: email
                password_path: password
                check_path: /security/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        users:
            pattern: ^/api/users
            methods: [DELETE, GET]
            stateless: true
            jwt: ~
        todos:
            pattern: ^/api/todos
            methods: [PUT, DELETE, GET, POST]
            stateless: true
            jwt: ~
        account:
            pattern: ^/api/account
            methods: [POST, GET]
            stateless: true
            jwt: ~
        conversations:
            pattern: ^/api/conversations
            methods: [POST, GET]
            stateless: true
            jwt: ~
        main:
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/security, roles: PUBLIC_ACCESS }
        - { path: ^/api/security, roles: PUBLIC_ACCESS }
        - { path: ^/api/users, roles: IS_AUTHENTICATED_FULLY, methods: [DELETE, GET] }
        - { path: ^/api/todos, roles: IS_AUTHENTICATED_FULLY, methods: [GET, POST, PUT, DELETE] }
        - { path: ^/api/account, roles: IS_AUTHENTICATED_FULLY, methods: [GET, POST, PUT, DELETE] }
        - { path: ^/api/conversations, roles: IS_AUTHENTICATED_FULLY, methods: [GET, POST] }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
